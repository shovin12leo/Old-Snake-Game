#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>

// Constants
const int GRID_SIZE = 20;
const int SCREEN_WIDTH = 400;
const int SCREEN_HEIGHT = 400;
const int GRID_WIDTH = SCREEN_WIDTH / GRID_SIZE;
const int GRID_HEIGHT = SCREEN_HEIGHT / GRID_SIZE;

// Direction enum
enum Direction { Up, Down, Left, Right };

// Snake segment struct
struct Segment {
    int x, y;
    Segment(int xpos, int ypos) : x(xpos), y(ypos) {}
};

int main() {
    // Create the window
    sf::RenderWindow window(sf::VideoMode(SCREEN_WIDTH, SCREEN_HEIGHT), "Snake Game");

    // Initialize game variables
    std::vector<Segment> snake;
    Direction dir = Right;
    int foodX = 10, foodY = 10;
    bool gameOver = false;

    // Set up the clock
    sf::Clock clock;
    float timer = 0, delay = 0.1;

    // Game loop
    while (window.isOpen()) {
        float deltaTime = clock.restart().asSeconds();
        timer += deltaTime;

        // Handle events
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }
            if (event.type == sf::Event::KeyPressed) {
                switch (event.key.code) {
                    case sf::Keyboard::Up:
                        if (dir != Down)
                            dir = Up;
                        break;
                    case sf::Keyboard::Down:
                        if (dir != Up)
                            dir = Down;
                        break;
                    case sf::Keyboard::Left:
                        if (dir != Right)
                            dir = Left;
                        break;
                    case sf::Keyboard::Right:
                        if (dir != Left)
                            dir = Right;
                        break;
                    default:
                        break;
                }
            }
        }

        // Snake movement
        if (timer > delay) {
            timer = 0;
            Segment newHead = snake[0];
            switch (dir) {
                case Up:
                    newHead.y -= 1;
                    break;
                case Down:
                    newHead.y += 1;
                    break;
                case Left:
                    newHead.x -= 1;
                    break;
                case Right:
                    newHead.x += 1;
                    break;
                default:
                    break;
            }

            // Collision detection
            if (newHead.x < 0 || newHead.x >= GRID_WIDTH || newHead.y < 0 || newHead.y >= GRID_HEIGHT) {
                gameOver = true;
            }
            for (size_t i = 1; i < snake.size(); ++i) {
                if (newHead.x == snake[i].x && newHead.y == snake[i].y) {
                    gameOver = true;
                }
            }
            if (newHead.x == foodX && newHead.y == foodY) {
                // Grow snake
                snake.push_back(Segment(foodX, foodY));
                // Generate new food position
                foodX = rand() % GRID_WIDTH;
                foodY = rand() % GRID_HEIGHT;
            } else {
                // Move snake
                for (size_t i = snake.size() - 1; i > 0; --i) {
                    snake[i] = snake[i - 1];
                }
            }

            snake[0] = newHead;
        }

        // Draw everything
        window.clear();

        // Draw snake
        sf::RectangleShape segment(sf::Vector2f(GRID_SIZE, GRID_SIZE));
        segment.setFillColor(sf::Color::Green);
        for (const auto &s : snake) {
            segment.setPosition(s.x * GRID_SIZE, s.y * GRID_SIZE);
            window.draw(segment);
        }

        // Draw food
        sf::RectangleShape food(sf::Vector2f(GRID_SIZE, GRID_SIZE));
        food.setFillColor(sf::Color::Red);
        food.setPosition(foodX * GRID_SIZE, foodY * GRID_SIZE);
        window.draw(food);

        // Display game over message
        if (gameOver) {
            sf::Font font;
            if (!font.loadFromFile("arial.ttf")) {
                std::cerr << "Error loading font" << std::endl;
                return 1;
            }
            sf::Text text;
            text.setFont(font);
            text.setString("Game Over!");
            text.setCharacterSize(30);
            text.setFillColor(sf::Color::White);
            text.setPosition(SCREEN_WIDTH / 2 - 100, SCREEN_HEIGHT / 2 - 15);
            window.draw(text);
        }

        window.display();
    }

    return 0;
}
